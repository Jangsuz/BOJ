#백트래킹 : 해를 찾는 도중 해가 아니어서 막히면, 되돌아가서 다시 해를 찾는 기법(조건을 만족하는 경우만 살펴봄)
#최적화 문제, 결정 문제 풀 때 사용
import sys
input = sys.stdin.readline

N = int(input())
ans = 987654321
#시작 노드 기록
start_node = 0
#2차원 인접리스트로 표현
graph = []
for _ in range(N):
  graph.append(list(map(int, input().split())))

def dfs(start, depth, cost):
  global ans
  #탈출점 - 깊이가 N이고 시작 노드와 같아질 때
  if depth == N and start_node == start:
    ans = min(ans, cost)
  else:
    #나머지 노드 탐색
    for j in range(N):
      #자기자신이거나 비용이 커지면 패스
      if graph[start][j] == 0 or cost > ans:
        continue
      if not visited[start]:
        cost += graph[start][j]
        visited[start] = True
        dfs(j, depth+1, cost)
        #이 두 코드를 모르겠다 . .
        visited[start] = False
        cost -= graph[start][j]

for i in range(N):
  visited = [False]*N
  start_node = i
  dfs(i, 0, 0)

print(ans)