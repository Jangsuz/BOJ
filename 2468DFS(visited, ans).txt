#visited로 dfs문 빠져나가는 설정
#ans값 구하기

import sys
sys.setrecursionlimit(10**8)

#좌표설정
dx = [0, 0, -1, 1]
dy = [-1, 1, 0, 0]

#입력 및 초기화
N = int(input())
graph = []
for _ in range(N):
  graph.append(list(map(int, input().split())))

def dfs(x, y, h):
  #이미 방문한 지역은 0으로 바꿔줌
  for k in range(4):
    nx = x + dx[k]
    ny = y + dy[k]
    #범위체크
    if nx >= 0 and nx < N and ny >= 0 and ny < N:
      if graph[nx][ny] > h and not visited[nx][ny]:
        visited[nx][ny] = True
        dfs(nx, ny, h) 
        
max_height = max(map(max, graph))
ans = 1 #아무 지역도 잠기지 않을 수 있음
for p in range(max_height):
  visited = [[False]*N for _ in range(N)]
  safe = 0
  for i in range(N):
    for j in range(N):
      if graph[i][j] > p and not visited[i][j]:
        safe+=1
        visited[i][j] = True
        dfs(i, j, p)
  #가장 큰 값을 ans에 저장
  ans = max(ans, safe)

print(ans)